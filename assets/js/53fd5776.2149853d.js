"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[4150],{7170:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"simpackage/spice/spice_ast","title":"Spice AST","description":"The spice_ast module defines the Abstract Syntax Tree (AST) structures for SPICE netlists. Each element of a SPICE circuit (components, sources, subcircuits, etc.) is represented as a class with relevant attributes.","source":"@site/connectors/simpackage/spice/spice_ast.md","sourceDirName":"simpackage/spice","slug":"/simpackage/spice/spice_ast","permalink":"/connectors/simpackage/spice/spice_ast","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"connectorsSidebar","previous":{"title":"Referrables","permalink":"/connectors/simpackage/spice/referrables"},"next":{"title":"Spice Parser","permalink":"/connectors/simpackage/spice/spiceparser"}}');var l=s(4848),r=s(8453);const c={},o="Spice AST",a={},t=[{value:"Base Classes",id:"base-classes",level:2},{value:"Ast",id:"ast",level:3},{value:"Component",id:"component",level:3},{value:"Expression",id:"expression",level:3},{value:"Feature",id:"feature",level:3},{value:"Lib",id:"lib",level:3},{value:"Include",id:"include",level:3},{value:"Circuit Definition",id:"circuit-definition",level:2},{value:"CircuitDef",id:"circuitdef",level:3},{value:"Passive Components",id:"passive-components",level:2},{value:"Resistor",id:"resistor",level:3},{value:"Capacitor",id:"capacitor",level:3},{value:"Inductor",id:"inductor",level:3},{value:"CoupledInductors",id:"coupledinductors",level:3},{value:"Semiconductor Devices",id:"semiconductor-devices",level:2},{value:"Diode",id:"diode",level:3},{value:"Bjt",id:"bjt",level:3},{value:"Mosfet",id:"mosfet",level:3},{value:"Jfet",id:"jfet",level:3},{value:"Mesfet",id:"mesfet",level:3},{value:"Sources",id:"sources",level:2},{value:"VoltageSource",id:"voltagesource",level:3},{value:"CurrentSource",id:"currentsource",level:3},{value:"DistortionTerm",id:"distortionterm",level:3},{value:"Controlled Sources",id:"controlled-sources",level:2},{value:"Vcvs",id:"vcvs",level:3},{value:"Vccs",id:"vccs",level:3},{value:"Cccs",id:"cccs",level:3},{value:"Ccvs",id:"ccvs",level:3},{value:"Transmission Lines",id:"transmission-lines",level:2},{value:"LosslessTransmissionLine",id:"losslesstransmissionline",level:3},{value:"LossyTransmissionLine",id:"lossytransmissionline",level:3},{value:"SingleLossyTransmissionLine",id:"singlelossytransmissionline",level:3},{value:"UniformRcLine",id:"uniformrcline",level:3},{value:"CoupledMulticonductorLine",id:"coupledmulticonductorline",level:3},{value:"Switches and Subcircuits",id:"switches-and-subcircuits",level:2},{value:"SwitchVC",id:"switchvc",level:3},{value:"SwitchCC",id:"switchcc",level:3},{value:"Subcircuit",id:"subcircuit",level:3},{value:"Placeholders",id:"placeholders",level:2},{value:"XSpiceCodeModel",id:"xspicecodemodel",level:3},{value:"BehaviouralSource",id:"behaviouralsource",level:3},{value:"VerilogDevice",id:"verilogdevice",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"spice-ast",children:"Spice AST"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"spice_ast"})," module defines the Abstract Syntax Tree (AST) structures for SPICE netlists. Each element of a SPICE circuit (components, sources, subcircuits, etc.) is represented as a class with relevant attributes."]}),"\n",(0,l.jsx)(n.h2,{id:"base-classes",children:"Base Classes"}),"\n",(0,l.jsx)(n.h3,{id:"ast",children:"Ast"}),"\n",(0,l.jsx)(n.p,{children:"Base class for all AST elements."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Ast(BaseModel):\r\n    pass\n"})}),"\n",(0,l.jsx)(n.h3,{id:"component",children:"Component"}),"\n",(0,l.jsx)(n.p,{children:"Base class for circuit components with name, connections, and features."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Component(Ast):\r\n    name: str\r\n    connections: list[str]\r\n    features: list[Feature]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"expression",children:"Expression"}),"\n",(0,l.jsx)(n.p,{children:"Represents expressions with referenced identifiers and source span."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Expression(Ast):\r\n    references: set[str]\r\n    span: Span\n"})}),"\n",(0,l.jsx)(n.h3,{id:"feature",children:"Feature"}),"\n",(0,l.jsx)(n.p,{children:"Represents a feature/parameter with name and value."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Feature(Ast):\r\n    name: str\r\n    value: Expression\n"})}),"\n",(0,l.jsx)(n.h3,{id:"lib",children:"Lib"}),"\n",(0,l.jsx)(n.p,{children:"Library declaration with path and optional arguments."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Lib(Ast):\r\n    path: Span\r\n    argument: Optional[Span]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"include",children:"Include"}),"\n",(0,l.jsx)(n.p,{children:"Include declaration with file path."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Include(Ast):\r\n    path: Span\n"})}),"\n",(0,l.jsx)(n.h2,{id:"circuit-definition",children:"Circuit Definition"}),"\n",(0,l.jsx)(n.h3,{id:"circuitdef",children:"CircuitDef"}),"\n",(0,l.jsx)(n.p,{children:"Complete circuit definition with name, libraries, includes, parameters, components, connections, and formal parameters."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class CircuitDef(Ast):\r\n    name: str\r\n    libs: list[Lib]\r\n    includes: list[Include]\r\n    parameters: list[Feature]\r\n    components: list[Component]\r\n    connections: list[str]\r\n    formal_parameters: list[Feature]\n"})}),"\n",(0,l.jsx)(n.h2,{id:"passive-components",children:"Passive Components"}),"\n",(0,l.jsx)(n.h3,{id:"resistor",children:"Resistor"}),"\n",(0,l.jsx)(n.p,{children:"Resistor component with value and optional model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Resistor(Component):\r\n    value: Expression\r\n    model: Optional[str]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"capacitor",children:"Capacitor"}),"\n",(0,l.jsx)(n.p,{children:"Capacitor component with optional value and model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Capacitor(Component):\r\n    value: Optional[Expression]\r\n    model: Optional[str]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inductor",children:"Inductor"}),"\n",(0,l.jsx)(n.p,{children:"Inductor component with optional value and model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Inductor(Component):\r\n    value: Optional[Expression]\r\n    model: Optional[str]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"coupledinductors",children:"CoupledInductors"}),"\n",(0,l.jsx)(n.p,{children:"Coupled inductors component with coupling value."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class CoupledInductors(Component):\r\n    value: Expression\n"})}),"\n",(0,l.jsx)(n.h2,{id:"semiconductor-devices",children:"Semiconductor Devices"}),"\n",(0,l.jsx)(n.h3,{id:"diode",children:"Diode"}),"\n",(0,l.jsx)(n.p,{children:"Diode component with model name and on/off state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Diode(Component):\r\n    model: str\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h3,{id:"bjt",children:"Bjt"}),"\n",(0,l.jsx)(n.p,{children:"Bipolar junction transistor with model and state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Bjt(Component):\r\n    model: str\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h3,{id:"mosfet",children:"Mosfet"}),"\n",(0,l.jsx)(n.p,{children:"MOSFET component with model and state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Mosfet(Component):\r\n    model: str\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h3,{id:"jfet",children:"Jfet"}),"\n",(0,l.jsx)(n.p,{children:"JFET component with model, optional area, and state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Jfet(Component):\r\n    model: str\r\n    area: Optional[Expression]\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h3,{id:"mesfet",children:"Mesfet"}),"\n",(0,l.jsx)(n.p,{children:"MESFET component with model, optional area, and state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Mesfet(Component):\r\n    model: str\r\n    area: Optional[Expression]\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h2,{id:"sources",children:"Sources"}),"\n",(0,l.jsx)(n.h3,{id:"voltagesource",children:"VoltageSource"}),"\n",(0,l.jsx)(n.p,{children:"Voltage source with DC, AC, distortion, and transient specifications."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class VoltageSource(Component):\r\n    dc_value: Optional[Expression]\r\n    ac_magnitude: Optional[Expression]\r\n    ac_phase: Optional[Expression]\r\n    distortion_f1: DistortionTerm\r\n    distortion_f2: DistortionTerm\r\n    transient_value: Optional[Expression]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"currentsource",children:"CurrentSource"}),"\n",(0,l.jsx)(n.p,{children:"Current source with DC, AC, distortion, and transient specifications."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class CurrentSource(Component):\r\n    dc_value: Optional[Expression]\r\n    ac_magnitude: Optional[Expression]\r\n    ac_phase: Optional[Expression]\r\n    distortion_f1: DistortionTerm\r\n    distortion_f2: DistortionTerm\r\n    transient_value: Optional[Expression]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"distortionterm",children:"DistortionTerm"}),"\n",(0,l.jsx)(n.p,{children:"Distortion term with magnitude and phase components."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class DistortionTerm(BaseModel):\r\n    magnitude: Optional[Expression]\r\n    phase: Optional[Expression]\n"})}),"\n",(0,l.jsx)(n.h2,{id:"controlled-sources",children:"Controlled Sources"}),"\n",(0,l.jsx)(n.h3,{id:"vcvs",children:"Vcvs"}),"\n",(0,l.jsx)(n.p,{children:"Voltage-controlled voltage source."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Vcvs(Component):\r\n    value: Expression\n"})}),"\n",(0,l.jsx)(n.h3,{id:"vccs",children:"Vccs"}),"\n",(0,l.jsx)(n.p,{children:"Voltage-controlled current source."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Vccs(Component):\r\n    value: Expression\n"})}),"\n",(0,l.jsx)(n.h3,{id:"cccs",children:"Cccs"}),"\n",(0,l.jsx)(n.p,{children:"Current-controlled current source with controlling voltage name."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Cccs(Component):\r\n    vnam: str\r\n    value: Expression\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ccvs",children:"Ccvs"}),"\n",(0,l.jsx)(n.p,{children:"Current-controlled voltage source with controlling voltage name."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Ccvs(Component):\r\n    vnam: str\r\n    value: Expression\n"})}),"\n",(0,l.jsx)(n.h2,{id:"transmission-lines",children:"Transmission Lines"}),"\n",(0,l.jsx)(n.h3,{id:"losslesstransmissionline",children:"LosslessTransmissionLine"}),"\n",(0,l.jsx)(n.p,{children:"Lossless transmission line component."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class LosslessTransmissionLine(Component):\r\n    pass\n"})}),"\n",(0,l.jsx)(n.h3,{id:"lossytransmissionline",children:"LossyTransmissionLine"}),"\n",(0,l.jsx)(n.p,{children:"Lossy transmission line with model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class LossyTransmissionLine(Component):\r\n    model: str\n"})}),"\n",(0,l.jsx)(n.h3,{id:"singlelossytransmissionline",children:"SingleLossyTransmissionLine"}),"\n",(0,l.jsx)(n.p,{children:"Single lossy transmission line with model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class SingleLossyTransmissionLine(Component):\r\n    model: str\n"})}),"\n",(0,l.jsx)(n.h3,{id:"uniformrcline",children:"UniformRcLine"}),"\n",(0,l.jsx)(n.p,{children:"Uniform RC line with model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class UniformRcLine(Component):\r\n    model: str\n"})}),"\n",(0,l.jsx)(n.h3,{id:"coupledmulticonductorline",children:"CoupledMulticonductorLine"}),"\n",(0,l.jsx)(n.p,{children:"Coupled multiconductor line with model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class CoupledMulticonductorLine(Component):\r\n    model: str\n"})}),"\n",(0,l.jsx)(n.h2,{id:"switches-and-subcircuits",children:"Switches and Subcircuits"}),"\n",(0,l.jsx)(n.h3,{id:"switchvc",children:"SwitchVC"}),"\n",(0,l.jsx)(n.p,{children:"Voltage-controlled switch with model and state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class SwitchVC(Component):\r\n    model: str\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h3,{id:"switchcc",children:"SwitchCC"}),"\n",(0,l.jsx)(n.p,{children:"Current-controlled switch with controlling voltage, model, and state."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class SwitchCC(Component):\r\n    vnam: str\r\n    model: str\r\n    on: bool\n"})}),"\n",(0,l.jsx)(n.h3,{id:"subcircuit",children:"Subcircuit"}),"\n",(0,l.jsx)(n.p,{children:"Subcircuit instance with parent reference."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class Subcircuit(Component):\r\n    parent: str\n"})}),"\n",(0,l.jsx)(n.h2,{id:"placeholders",children:"Placeholders"}),"\n",(0,l.jsx)(n.h3,{id:"xspicecodemodel",children:"XSpiceCodeModel"}),"\n",(0,l.jsx)(n.p,{children:"XSpice code model component (not yet implemented)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class XSpiceCodeModel(Component):\r\n    pass\n"})}),"\n",(0,l.jsx)(n.h3,{id:"behaviouralsource",children:"BehaviouralSource"}),"\n",(0,l.jsx)(n.p,{children:"Behavioural source component (not yet implemented)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class BehaviouralSource(Component):\r\n    pass\n"})}),"\n",(0,l.jsx)(n.h3,{id:"verilogdevice",children:"VerilogDevice"}),"\n",(0,l.jsx)(n.p,{children:"Verilog device component (not yet implemented)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-py",children:"class VerilogDevice(Component):\r\n    pass\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var i=s(6540);const l={},r=i.createContext(l);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);