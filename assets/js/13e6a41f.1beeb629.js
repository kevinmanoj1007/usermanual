"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[9228],{2934:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"simpackage/simulatordomain","title":"Simulator","description":"The Simulator class is a domain-specific handler responsible for routing simulation requests, managing synchronization of required data, handling errors gracefully, and capturing performance metrics. It integrates with a WebSocket pool and thread pool to manage concurrent simulation sessions.","source":"@site/connectors/simpackage/simulatordomain.md","sourceDirName":"simpackage","slug":"/simpackage/simulatordomain","permalink":"/connectors/simpackage/simulatordomain","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"connectorsSidebar","previous":{"title":"SimInterface","permalink":"/connectors/simpackage/siminterface"},"next":{"title":"SpiceNetlistProcessor","permalink":"/connectors/simpackage/spice/netlist-reader"}}');var i=r(4848),t=r(8453);const l={},o="Simulator",d={},c=[{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Initializes",id:"initializes",level:3},{value:"Attributes",id:"attributes",level:2},{value:"Public Methods",id:"public-methods",level:2},{value:"Middleware Methods",id:"middleware-methods",level:2},{value:"Exception Handling",id:"exception-handling",level:2},{value:"Middleware Registration",id:"middleware-registration",level:2},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"Metrics Collection",id:"metrics-collection",level:3},{value:"Storage",id:"storage",level:3},{value:"Dependencies",id:"dependencies",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simulator",children:"Simulator"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"simulatordomain",children:"Simulator"})," class is a domain-specific handler responsible for routing simulation requests, managing synchronization of required data, handling errors gracefully, and capturing performance metrics. It integrates with a WebSocket pool and thread pool to manage concurrent simulation sessions."]}),"\n",(0,i.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Simulator(BaseDomain):\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inherits from:"})," BaseDomain"]}),"\n",(0,i.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(\r\n    self,\r\n    connection_pool: WebsocketPool,\r\n    thread_pool: ThreadPoolExecutor,\r\n    call_cb: Callable,\r\n    throw_errors: bool\r\n) -> None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"connection_pool"})," (WebsocketPool): Connection manager for communicating with external services."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"thread_pool"})," (ThreadPoolExecutor): Thread executor for parallel task execution."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"call_cb"})," (Callable): A callback function used for simulator event hooks."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"throw_errors"})," (bool): Determines whether errors should be propagated or suppressed."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"initializes",children:"Initializes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Internal state management"}),"\n",(0,i.jsx)(n.li,{children:"Global metric tracking middleware registration"}),"\n",(0,i.jsx)(n.li,{children:"Persisted global performance stats from disk (global_stats.json)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"connection_pool"})}),(0,i.jsx)(n.td,{children:"WebsocketPool"}),(0,i.jsx)(n.td,{children:"WebSocket pool for communicating with external systems"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"thread_pool"})}),(0,i.jsx)(n.td,{children:"ThreadPoolExecutor"}),(0,i.jsx)(n.td,{children:"Executor for concurrent background task execution"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"throw_errors"})}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"Flag to raise or suppress runtime exceptions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"call_cb"})}),(0,i.jsx)(n.td,{children:"Callable"}),(0,i.jsx)(n.td,{children:"Function used to invoke simulator-level callbacks"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"metrics_counter"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"Countdown used to determine when to persist metrics"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"global_stats_path"})}),(0,i.jsx)(n.td,{children:"Path"}),(0,i.jsx)(n.td,{children:"Filesystem path to store global metric stats"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"public-methods",children:"Public Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"async def call(self, data: Any, strategy: SimInterface) -> None\n"})}),"\n",(0,i.jsx)(n.p,{children:"Handles a single simulation request by routing to appropriate endpoints."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data"})," (dict): Request payload including method, request, request_id, and body"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"strategy"})," (",(0,i.jsx)(n.a,{href:"siminterface",children:"SimInterface"}),"): Strategy implementation to be used for processing"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Process:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Routes the request to the appropriate endpoint using the router"}),"\n",(0,i.jsx)(n.li,{children:"Handles all exceptions and sends structured error responses over the connection"}),"\n",(0,i.jsx)(n.li,{children:"Uses default success/error response templates defined in Defaults"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"middleware-methods",children:"Middleware Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"async def synchronize(self, request: Request, call_next) -> Any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Middleware for synchronizing circuit dependencies before simulation."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"request"})," (Request): Incoming request object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"call_next"})," (Callable): Next middleware or handler in the chain"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Synchronization Logic:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Determines whether simulation artifacts exist locally"}),"\n",(0,i.jsx)(n.li,{children:"If missing, requests the necessary data from an external service via WebSocket"}),"\n",(0,i.jsx)(n.li,{children:"Downloads a ZIP-encoded response, extracts contents, and places them in the appropriate project folder"}),"\n",(0,i.jsx)(n.li,{children:"Invokes the ON_SYNCHRONIZE callback upon completion"}),"\n",(0,i.jsx)(n.li,{children:"Passes the request to the next middleware or handler"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Synchronizes if:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The local artifact folder is empty AND"}),"\n",(0,i.jsx)(n.li,{children:"The request endpoint is not upload, netlist, or deps"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"async def capture_metrics(self, request: Request, call_next) -> Any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Middleware to capture and record request processing duration."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"request"})," (Request): Incoming request object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"call_next"})," (Callable): Next middleware or handler in the chain"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Process:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Measures the time taken to process the request"}),"\n",(0,i.jsx)(n.li,{children:"Records the duration using global_load_tracker"}),"\n",(0,i.jsx)(n.li,{children:"Saves aggregated metrics to disk every 5 requests"}),"\n",(0,i.jsx)(n.li,{children:"Forwards the request to the next handler and returns the response"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,i.jsx)(n.p,{children:"The call method handles and categorizes exceptions as follows:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Exception Type"}),(0,i.jsx)(n.th,{children:"Response Code"}),(0,i.jsx)(n.th,{children:"Behavior"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"SimulatorException"}),(0,i.jsx)(n.td,{children:"460"}),(0,i.jsx)(n.td,{children:"Logged and responded with message and optional extra_data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"RequestException"}),(0,i.jsx)(n.td,{children:"Custom"}),(0,i.jsx)(n.td,{children:"Responded with custom status code and message"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"General Exception"}),(0,i.jsx)(n.td,{children:"500"}),(0,i.jsx)(n.td,{children:"Responded with a generic internal server error"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Error Propagation:"}),"\r\nIf ",(0,i.jsx)(n.code,{children:"throw_errors"})," is enabled, exceptions are re-raised after handling."]}),"\n",(0,i.jsx)(n.h2,{id:"middleware-registration",children:"Middleware Registration"}),"\n",(0,i.jsx)(n.p,{children:"Middleware is registered globally during initialization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"router.add_middleware(self.synchronize)\r\nrouter.add_middleware(self.capture_metrics)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Execution Order:"}),"\r\nThese middlewares are executed for every request routed through the ",(0,i.jsx)(n.a,{href:"simulatordomain",children:"Simulator"})," in the order registered."]}),"\n",(0,i.jsx)(n.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.h3,{id:"metrics-collection",children:"Metrics Collection"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Request processing duration tracking"}),"\n",(0,i.jsx)(n.li,{children:"Global load statistics aggregation"}),"\n",(0,i.jsx)(n.li,{children:"Periodic persistence to disk (every 5 requests)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"storage",children:"Storage"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Metrics saved to ",(0,i.jsx)(n.code,{children:"global_stats.json"})]}),"\n",(0,i.jsxs)(n.li,{children:["Path configurable via ",(0,i.jsx)(n.code,{children:"global_stats_path"})," attribute"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"router from sim"}),"\n",(0,i.jsx)(n.li,{children:"Utility from sim.utils"}),"\n",(0,i.jsx)(n.li,{children:"global_load_tracker from sim.global_load_tracker"}),"\n",(0,i.jsx)(n.li,{children:"SimulatorCallbacks from sim.callbacks"}),"\n",(0,i.jsx)(n.li,{children:"SimulatorException, RequestException for structured error handling"}),"\n",(0,i.jsx)(n.li,{children:"Defaults for success/error response formatting"}),"\n",(0,i.jsx)(n.li,{children:"settings from sim.config"}),"\n",(0,i.jsx)(n.li,{children:"Request from cdk.router"}),"\n",(0,i.jsx)(n.li,{children:"BaseDomain from cdk.base_domain"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);