"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[5420],{6754:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"cdk/basestartup","title":"BaseStartup","description":"This module provides a CLI-based startup routine for connector initialization, configuration management, and orchestrator registration.","source":"@site/connectors/cdk/basestartup.md","sourceDirName":"cdk","slug":"/cdk/basestartup","permalink":"/connectors/cdk/basestartup","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"connectorsSidebar","previous":{"title":"BaseDomain","permalink":"/connectors/cdk/basedomain"},"next":{"title":"CDKSettings","permalink":"/connectors/cdk/cdksettings"}}');var r=s(4848),i=s(8453);const a={},c="BaseStartup",d={},l=[{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Initializes",id:"initializes",level:3},{value:"Attributes",id:"attributes",level:2},{value:"Public Methods",id:"public-methods",level:2},{value:"Internal Methods",id:"internal-methods",level:2},{value:"Storage Management",id:"storage-management",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Dependencies",id:"dependencies",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"basestartup",children:"BaseStartup"})}),"\n",(0,r.jsxs)(n.p,{children:["This module provides a CLI-based startup routine for connector initialization, configuration management, and orchestrator ",(0,r.jsx)(n.a,{href:"register",children:"registration"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class BaseStartup:\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A class that defines the bootstrapping logic for connector applications. It manages commands, environment validation, file-based state persistence, and connector ",(0,r.jsx)(n.a,{href:"register",children:"registration"})," with the orchestrator."]}),"\n",(0,r.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(\r\n    register_data: dict,\r\n    helper_text: dict[str, str],\r\n    commands: dict[str, Callable],\r\n    connector_kind: ConnectorKind,\r\n    connector_options: dict[str, Option],\r\n    post_register: Callable | None = None,\r\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"register_data"})," (dict): Data payload to be used during ",(0,r.jsx)(n.a,{href:"register",children:"registration"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"helper_text"})," (dict[str, str]): A dictionary of help messages for CLI usage."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"commands"})," (dict[str, Callable]): Mapping of command names to their execution logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"connector_kind"})," (ConnectorKind): Enum indicating the type of connector."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"connector_options"})," (dict[str, Option]): Dictionary of available CLI options for the connector."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"post_register"})," (Callable | None, optional): Optional function to run after successful ",(0,r.jsx)(n.a,{href:"register",children:"registration"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"initializes",children:"Initializes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CLI command mapping and validation"}),"\n",(0,r.jsx)(n.li,{children:"Help text system for user guidance"}),"\n",(0,r.jsx)(n.li,{children:"Connector type and options configuration"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"register",children:"Registration"})," callback handling"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Attribute"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"register_data"})}),(0,r.jsx)(n.td,{children:"dict"}),(0,r.jsxs)(n.td,{children:["Data payload used during orchestrator ",(0,r.jsx)(n.a,{href:"register",children:"registration"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"helper_text"})}),(0,r.jsx)(n.td,{children:"dict[str, str]"}),(0,r.jsx)(n.td,{children:"Help messages for CLI commands"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"commands"})}),(0,r.jsx)(n.td,{children:"dict[str, Callable]"}),(0,r.jsx)(n.td,{children:"Command name to execution logic mapping"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"connector_kind"})}),(0,r.jsx)(n.td,{children:"ConnectorKind"}),(0,r.jsx)(n.td,{children:"Type classification of the connector"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"connector_options"})}),(0,r.jsx)(n.td,{children:"dict[str, Option]"}),(0,r.jsx)(n.td,{children:"Available CLI configuration options"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"post_register"})}),(0,r.jsx)(n.td,{children:"Callable | None"}),(0,r.jsxs)(n.td,{children:["Optional callback after successful ",(0,r.jsx)(n.a,{href:"register",children:"registration"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"storage_location"})}),(0,r.jsx)(n.td,{children:"Path"}),(0,r.jsx)(n.td,{children:"Full path to JSON persistence file"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"public-methods",children:"Public Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def parse_args()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Parses CLI arguments passed via sys.argv and dispatches the appropriate command/option logic. Validates commands and handles errors gracefully."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def error(message: str)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Prints a formatted error message with helpful guidance and exits the process."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def print_help(command=None)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Displays help text for a specific command (if given) or prints all registered help sections."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def routine()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Executes the registered subroutines in sequence. This is typically invoked during startup to ensure ",(0,r.jsx)(n.a,{href:"register",children:"registration"}),", secret checks, or any additional routines run before the connector becomes active."]}),"\n",(0,r.jsx)(n.h2,{id:"internal-methods",children:"Internal Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def register(field, fields)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Registers the connector with the orchestrator if the REG field is not already marked True. Updates the persistent storage state on success."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def check_secret(field, fields)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Verifies whether the stored secret matches the current configuration. If changed or absent, triggers re-",(0,r.jsx)(n.a,{href:"register",children:"registration"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def add_subroutine(name: str, field_default: Any, cb: Callable)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Registers a custom initialization subroutine to be run during routine() execution."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def write_default()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initializes the persistent storage file with default field values, if it does not already exist."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def read_storage()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Reads and returns the current persisted fields from disk, validating expected keys."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def update_storage(field_name, value)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Updates a field in the persistent storage file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def file_exists(file)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Checks if a file exists on disk."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def is_empty()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Checks whether the persistent storage file exists and is empty."}),"\n",(0,r.jsx)(n.h2,{id:"storage-management",children:"Storage Management"}),"\n",(0,r.jsx)(n.p,{children:"Persistent state is stored in a JSON file at:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"cdk_settings.data_dir/connector_storage\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The storage system manages connector ",(0,r.jsx)(n.a,{href:"register",children:"registration"})," state, secrets, and custom field persistence across application restarts."]}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python connector.py register --init\n"})}),"\n",(0,r.jsx)(n.p,{children:"If called without arguments, the class performs only the state-checking routine (routine())."}),"\n",(0,r.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"cdksettings",children:"cdk.config.cdk_settings"})}),"\n",(0,r.jsx)(n.li,{children:"cdk.constants.ConnectorKind"}),"\n",(0,r.jsx)(n.li,{children:"cdk.constants.Option"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);