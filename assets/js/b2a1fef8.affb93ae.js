"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[6980],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(6540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},9781:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"API/Models/Optimization/targets","title":"TargetSpec","description":"Data classes for defining target specifications in optimization processes","source":"@site/adk/API/Models/Optimization/targets.md","sourceDirName":"API/Models/Optimization","slug":"/API/Models/Optimization/targets","permalink":"/adk/API/Models/Optimization/targets","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"TargetSpec","description":"Data classes for defining target specifications in optimization processes","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"OptimizationSpec","permalink":"/adk/API/Models/Optimization/optimization-spec"},"next":{"title":"BasePreprocessor API","permalink":"/adk/API/base-preprocessor-api"}}');var t=i(4848),a=i(8453);const o={title:"TargetSpec",description:"Data classes for defining target specifications in optimization processes",sidebar_position:4},r="TargetSpec",l={},d=[{value:"Definition",id:"definition",level:2},{value:"Members",id:"members",level:2},{value:"<code>name: str = Field(min_length=1)</code>",id:"name-str--fieldmin_length1",level:3},{value:"<code>fn: Fn</code>",id:"fn-fn",level:3},{value:"Definition",id:"definition-1",level:2},{value:"Members",id:"members-1",level:2},{value:"<code>min: float</code>",id:"min-float",level:3},{value:"<code>max: float</code>",id:"max-float",level:3},{value:"Definition",id:"definition-2",level:2},{value:"Members",id:"members-2",level:2},{value:"<code>target_values: ValueBounds</code>",id:"target_values-valuebounds",level:3},{value:"<code>observation_bounds: ValueBounds</code>",id:"observation_bounds-valuebounds",level:3},{value:"Definition",id:"definition-3",level:2},{value:"Members",id:"members-3",level:2},{value:"<code>target_values: list[ValueBounds]</code>",id:"target_values-listvaluebounds",level:3},{value:"<code>observation_bounds: list[ValueBounds]</code>",id:"observation_bounds-listvaluebounds",level:3},{value:"Definition",id:"definition-4",level:2},{value:"Members",id:"members-4",level:2},{value:"<code>target_values: list[list[ValueBounds]]</code>",id:"target_values-listlistvaluebounds",level:3},{value:"<code>observation_bounds: list[list[ValueBounds]]</code>",id:"observation_bounds-listlistvaluebounds",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"targetspec",children:"TargetSpec"})}),"\n",(0,t.jsx)(n.p,{children:"A base data class that defines the common structure for all target specifications in an optimization process. It provides the target's name and associated objective function used for evaluation."}),"\n",(0,t.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class TargetSpec(BaseModel):\r\n    name: str = Field(min_length=1)\r\n    fn: Fn\n"})}),"\n",(0,t.jsx)(n.h2,{id:"members",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"name-str--fieldmin_length1",children:(0,t.jsx)(n.code,{children:"name: str = Field(min_length=1)"})}),"\n",(0,t.jsx)(n.p,{children:"The unique identifier or name of the target. Must contain at least one character."}),"\n",(0,t.jsx)(n.h3,{id:"fn-fn",children:(0,t.jsx)(n.code,{children:"fn: Fn"})}),"\n",(0,t.jsx)(n.p,{children:"The objective function associated with the target. Defines how the optimization process measures and evaluates success or deviation from desired outcomes."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"valuebounds",children:"ValueBounds"}),"\n",(0,t.jsx)(n.p,{children:"Defines the lower and upper numeric limits for a single scalar value used in a target specification."}),"\n",(0,t.jsx)(n.h2,{id:"definition-1",children:"Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ValueBounds(BaseModel):\r\n    min: float\r\n    max: float\n"})}),"\n",(0,t.jsx)(n.h2,{id:"members-1",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"min-float",children:(0,t.jsx)(n.code,{children:"min: float"})}),"\n",(0,t.jsx)(n.p,{children:"Minimum allowable value for the target or observed data."}),"\n",(0,t.jsx)(n.h3,{id:"max-float",children:(0,t.jsx)(n.code,{children:"max: float"})}),"\n",(0,t.jsx)(n.p,{children:"Maximum allowable value for the target or observed data."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"scalartargetspec",children:"ScalarTargetSpec"}),"\n",(0,t.jsxs)(n.p,{children:["Extends ",(0,t.jsx)(n.code,{children:"TargetSpec"})," to represent a scalar target specification, including bounds for both target and observation values."]}),"\n",(0,t.jsx)(n.h2,{id:"definition-2",children:"Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ScalarTargetSpec(TargetSpec):\r\n    target_values: ValueBounds\r\n    observation_bounds: ValueBounds\n"})}),"\n",(0,t.jsx)(n.h2,{id:"members-2",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"target_values-valuebounds",children:(0,t.jsx)(n.code,{children:"target_values: ValueBounds"})}),"\n",(0,t.jsx)(n.p,{children:"The desired target value range that the optimization aims to achieve."}),"\n",(0,t.jsx)(n.h3,{id:"observation_bounds-valuebounds",children:(0,t.jsx)(n.code,{children:"observation_bounds: ValueBounds"})}),"\n",(0,t.jsx)(n.p,{children:"The permissible range of observed values during optimization for validation and constraint checking."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"vectortargetspec",children:"VectorTargetSpec"}),"\n",(0,t.jsxs)(n.p,{children:["Extends ",(0,t.jsx)(n.code,{children:"TargetSpec"})," to define vector-based targets, supporting multiple elements each with their own bounds."]}),"\n",(0,t.jsx)(n.h2,{id:"definition-3",children:"Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class VectorTargetSpec(TargetSpec):\r\n    target_values: list[ValueBounds]\r\n    observation_bounds: list[ValueBounds]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"members-3",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"target_values-listvaluebounds",children:(0,t.jsx)(n.code,{children:"target_values: list[ValueBounds]"})}),"\n",(0,t.jsx)(n.p,{children:"List of value bounds representing the desired range for each element in the target vector."}),"\n",(0,t.jsx)(n.h3,{id:"observation_bounds-listvaluebounds",children:(0,t.jsx)(n.code,{children:"observation_bounds: list[ValueBounds]"})}),"\n",(0,t.jsx)(n.p,{children:"List of value bounds defining acceptable observed ranges for each vector element during optimization."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"matrixtargetspec",children:"MatrixTargetSpec"}),"\n",(0,t.jsxs)(n.p,{children:["Extends ",(0,t.jsx)(n.code,{children:"TargetSpec"})," to define matrix-based targets for multidimensional optimization objectives."]}),"\n",(0,t.jsx)(n.h2,{id:"definition-4",children:"Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class MatrixTargetSpec(TargetSpec):\r\n    target_values: list[list[ValueBounds]]\r\n    observation_bounds: list[list[ValueBounds]]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"members-4",children:"Members"}),"\n",(0,t.jsx)(n.h3,{id:"target_values-listlistvaluebounds",children:(0,t.jsx)(n.code,{children:"target_values: list[list[ValueBounds]]"})}),"\n",(0,t.jsxs)(n.p,{children:["Nested list of ",(0,t.jsx)(n.code,{children:"ValueBounds"})," defining the target value range for each cell in the matrix target."]}),"\n",(0,t.jsx)(n.h3,{id:"observation_bounds-listlistvaluebounds",children:(0,t.jsx)(n.code,{children:"observation_bounds: list[list[ValueBounds]]"})}),"\n",(0,t.jsxs)(n.p,{children:["Nested list of ",(0,t.jsx)(n.code,{children:"ValueBounds"})," defining the acceptable observed range for each matrix element during optimization."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);