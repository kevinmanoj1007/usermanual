"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[1600],{4038:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"simpackage/simconnector","title":"SimConnector","description":"SimConnector is a concrete implementation of the BaseConnector class that connects a simulation strategy to a WebSocket-based backend. It receives, processes, and manages simulation tasks asynchronously, while supporting configurable test options and extensible callback hooks.","source":"@site/connectors/simpackage/simconnector.md","sourceDirName":"simpackage","slug":"/simpackage/simconnector","permalink":"/connectors/simpackage/simconnector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"connectorsSidebar","previous":{"title":"Middleware","permalink":"/connectors/cdk/middleware"},"next":{"title":"Router Handlers","permalink":"/connectors/simpackage/simcontroller"}}');var t=s(4848),r=s(8453);const l={},a="SimConnector",c={},o=[{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Initializes",id:"initializes",level:3},{value:"Attributes",id:"attributes",level:2},{value:"Public Methods",id:"public-methods",level:2},{value:"Internal Methods",id:"internal-methods",level:2},{value:"Runtime Options",id:"runtime-options",level:2},{value:"Example Usage",id:"example-usage",level:3},{value:"Dependencies",id:"dependencies",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"simconnector",children:"SimConnector"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"simconnector",children:"SimConnector"})," is a concrete implementation of the BaseConnector class that connects a simulation strategy to a WebSocket-based backend. It receives, processes, and manages simulation tasks asynchronously, while supporting configurable test options and extensible callback hooks."]}),"\n",(0,t.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class SimConnector(BaseConnector):\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Inherits from:"})," BaseConnector"]}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(self, strategy: SimInterface, *, throw_errors=False) -> None:\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"strategy"})," (",(0,t.jsx)(n.a,{href:"siminterface",children:"SimInterface"}),"): The simulation strategy to be used for processing incoming requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"throw_errors"})," (bool, optional): If set to True, exceptions encountered during task processing will be re-raised. Defaults to False."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"initializes",children:"Initializes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A persistent WebSocket connection (/connector/stream)"}),"\n",(0,t.jsx)(n.li,{children:"Configurable runtime options"}),"\n",(0,t.jsx)(n.li,{children:"Startup routines"}),"\n",(0,t.jsxs)(n.li,{children:["A simulation domain (",(0,t.jsx)(n.a,{href:"simulatordomain",children:"Simulator"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"A task queue and processing state trackers"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"simulatordomain",children:"Simulator"}),"-level callback registration support"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Attribute"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"_ws"})}),(0,t.jsx)(n.td,{children:"WebsocketAsyncIO"}),(0,t.jsx)(n.td,{children:"Asynchronous WebSocket connection manager"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"strategy"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"siminterface",children:"SimInterface"})}),(0,t.jsx)(n.td,{children:"Simulation strategy passed during instantiation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"domain"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"simulatordomain",children:"Simulator"})}),(0,t.jsx)(n.td,{children:"Simulation handler responsible for executing core logic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"_task_queue"})}),(0,t.jsx)(n.td,{children:"Deque"}),(0,t.jsx)(n.td,{children:"Queue holding pending simulation requests"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"_proccessing_tasks"})}),(0,t.jsx)(n.td,{children:"int"}),(0,t.jsx)(n.td,{children:"Counter for currently running simulation tasks"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"_simulator_callbacks"})}),(0,t.jsx)(n.td,{children:"dict[SimulatorCallbacks, Callable]"}),(0,t.jsx)(n.td,{children:"Mapping of callback identifiers to functions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"options"})}),(0,t.jsx)(n.td,{children:"dict[str, Option]"}),(0,t.jsx)(n.td,{children:'Supported runtime options (currently includes "test")'})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"public-methods",children:"Public Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def on_start()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Runs during connector startup. Checks for active runtime options and performs early-stage operations, such as executing test modes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def check_options()\n"})}),"\n",(0,t.jsx)(n.p,{children:'Checks runtime options and handles special behaviors. If the "test" option is provided with sub-options (e.g., ["netlist", "simulate"]), it initializes the Testing module, runs the tests, and exits the process.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def register_simulator_callback(id: SimulatorCallbacks, cb: Callable)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Registers a ",(0,t.jsx)(n.a,{href:"simulatordomain",children:"simulator"}),"-level callback to be invoked during simulation events. The callback is associated with a unique identifier (SimulatorCallbacks)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def register_simulator_callback(id: SimulatorCallbacks, cb: Callable)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initiates processing of a new simulation task if the system is not currently at maximum processing capacity and if the task queue is not empty."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def async receiver()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Asynchronous method that continuously listens for incoming WebSocket messages. On receiving a valid request and request_id, it appends the data to the task queue and triggers processing."}),"\n",(0,t.jsx)(n.h2,{id:"internal-methods",children:"Internal Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _call_cb(id: SimulatorCallbacks, *args, **kwargs)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Invokes a previously registered callback function, if available, for a specific ",(0,t.jsx)(n.a,{href:"simulatordomain",children:"simulator"})," event."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _proccess_request()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Dequeues a simulation request and submits it as an asynchronous task. Each task is bound to a done callback that handles post-processing and error reporting."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def task_handler(task: Task, send_error: Callable[[int, str], Coroutine])\n"})}),"\n",(0,t.jsx)(n.p,{children:"Handles the outcome of an asynchronous simulation task. If the task raises an exception, it logs the error and sends a structured error message through the WebSocket. It also updates internal task counters and triggers the next task in the queue."}),"\n",(0,t.jsx)(n.h2,{id:"runtime-options",children:"Runtime Options"}),"\n",(0,t.jsx)(n.p,{children:"This connector currently supports the following runtime options:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"test"}),": Executes predefined simulation tests and exits."]}),"\n",(0,t.jsx)(n.p,{children:"Available test sub-options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"netlist"'}),"\n",(0,t.jsx)(n.li,{children:'"simulate"'}),"\n",(0,t.jsx)(n.li,{children:'"parameters"'}),"\n",(0,t.jsx)(n.li,{children:'"nets"'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python app.py --test=simulate,nets\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will execute the selected tests and terminate the program without initializing the WebSocket connection or processing loop."}),"\n",(0,t.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"BaseConnector from cdk.base_connector"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"simulatordomain",children:"Simulator"})," from sim.simulator"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"siminterface",children:"SimInterface"})," from .interface"]}),"\n",(0,t.jsx)(n.li,{children:"WebsocketAsyncIO from core.websocket.asyncio"}),"\n",(0,t.jsx)(n.li,{children:"Ws, asyncio from cdk.services.ws"}),"\n",(0,t.jsx)(n.li,{children:"Option from cdk.models.option"}),"\n",(0,t.jsx)(n.li,{children:"SimulatorCallbacks from sim.callbacks"}),"\n",(0,t.jsx)(n.li,{children:"Testing from sim.testing"}),"\n",(0,t.jsx)(n.li,{children:"StartupService from .services.startup_service"}),"\n",(0,t.jsx)(n.li,{children:"settings from sim.config"}),"\n",(0,t.jsx)(n.li,{children:"logger from cdk.logger"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);