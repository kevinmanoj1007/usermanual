"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[5031],{7989:e=>{e.exports=JSON.parse('{"version":{"pluginId":"connectors","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"connectorsSidebar":[{"type":"link","label":"Introduction","href":"/connectors/intro","docId":"intro","unlisted":false},{"type":"category","label":"CDK","collapsed":false,"items":[{"type":"link","label":"BaseConnector","href":"/connectors/cdk/baseconnector","docId":"cdk/baseconnector","unlisted":false},{"type":"link","label":"BaseDomain","href":"/connectors/cdk/basedomain","docId":"cdk/basedomain","unlisted":false},{"type":"link","label":"BaseStartup","href":"/connectors/cdk/basestartup","docId":"cdk/basestartup","unlisted":false},{"type":"link","label":"CDKSettings","href":"/connectors/cdk/cdksettings","docId":"cdk/cdksettings","unlisted":false},{"type":"link","label":"Registration","href":"/connectors/cdk/register","docId":"cdk/register","unlisted":false},{"type":"link","label":"Router","href":"/connectors/cdk/router","docId":"cdk/router","unlisted":false},{"type":"link","label":"Middleware","href":"/connectors/cdk/middleware","docId":"cdk/middleware","unlisted":false}],"collapsible":true},{"type":"category","label":"SimPackage","collapsed":false,"items":[{"type":"link","label":"SimConnector","href":"/connectors/simpackage/simconnector","docId":"simpackage/simconnector","unlisted":false},{"type":"link","label":"Router Handlers","href":"/connectors/simpackage/simcontroller","docId":"simpackage/simcontroller","unlisted":false},{"type":"link","label":"Connector Models","href":"/connectors/simpackage/slim-models","docId":"simpackage/slim-models","unlisted":false},{"type":"link","label":"SimInterface","href":"/connectors/simpackage/siminterface","docId":"simpackage/siminterface","unlisted":false},{"type":"link","label":"Simulator","href":"/connectors/simpackage/simulatordomain","docId":"simpackage/simulatordomain","unlisted":false},{"type":"category","label":"Spice","collapsed":false,"items":[{"type":"link","label":"SpiceNetlistProcessor","href":"/connectors/simpackage/spice/netlist-reader","docId":"simpackage/spice/netlist-reader","unlisted":false},{"type":"link","label":"Netlist Scope","href":"/connectors/simpackage/spice/netlistscope","docId":"simpackage/spice/netlistscope","unlisted":false},{"type":"link","label":"Referrables","href":"/connectors/simpackage/spice/referrables","docId":"simpackage/spice/referrables","unlisted":false},{"type":"link","label":"Spice AST","href":"/connectors/simpackage/spice/spice_ast","docId":"simpackage/spice/spice_ast","unlisted":false},{"type":"link","label":"Spice Parser","href":"/connectors/simpackage/spice/spiceparser","docId":"simpackage/spice/spiceparser","unlisted":false},{"type":"link","label":"SPICEVariants","href":"/connectors/simpackage/spice/spicevariants","docId":"simpackage/spice/spicevariants","unlisted":false}],"collapsible":true}],"collapsible":true}]},"docs":{"cdk/baseconnector":{"id":"cdk/baseconnector","title":"BaseConnector","description":"The BaseConnector class is an abstract base class for building WebSocket-based connectors. It defines the lifecycle, connection handling, callback management, task orchestration, and communication protocols between the client and the backend system.","sidebar":"connectorsSidebar"},"cdk/basedomain":{"id":"cdk/basedomain","title":"BaseDomain","description":"The BaseDomain class provides a foundational interface and shared utilities for all connector domain implementations. It is responsible for managing WebSocket communication with clients and handling message dispatching, including both success and error responses.","sidebar":"connectorsSidebar"},"cdk/basestartup":{"id":"cdk/basestartup","title":"BaseStartup","description":"This module provides a CLI-based startup routine for connector initialization, configuration management, and orchestrator registration.","sidebar":"connectorsSidebar"},"cdk/cdksettings":{"id":"cdk/cdksettings","title":"CDKSettings","description":"The CDKSettings class defines and loads configuration settings required to initialize and run a connector instance in the CDK (Connector Development Kit) environment. It provides both runtime environment selection (.env or .test.env) and a dynamic way to build the orchestrator\'s base URL.","sidebar":"connectorsSidebar"},"cdk/middleware":{"id":"cdk/middleware","title":"Middleware","description":"This module defines abstract Middleware class used to wrap request handlers, including logic to load environment-specific settings and construct the base URL for communication with the Orchestrator.","sidebar":"connectorsSidebar"},"cdk/register":{"id":"cdk/register","title":"Registration","description":"A utility function that handles connector registration with the orchestrator service through WebSocket communication.","sidebar":"connectorsSidebar"},"cdk/router":{"id":"cdk/router","title":"Router","description":"The Router class manages endpoint registration and request dispatching for CDK-based connectors. It supports route-based handling for methods (GET, SET, DELETE), typed argument validation via introspection, and middleware chaining.","sidebar":"connectorsSidebar"},"intro":{"id":"intro","title":"Introduction to Connectors","description":"Welcome to the Connectors section of the Genie User Manual.","sidebar":"connectorsSidebar"},"simpackage/simconnector":{"id":"simpackage/simconnector","title":"SimConnector","description":"SimConnector is a concrete implementation of the BaseConnector class that connects a simulation strategy to a WebSocket-based backend. It receives, processes, and manages simulation tasks asynchronously, while supporting configurable test options and extensible callback hooks.","sidebar":"connectorsSidebar"},"simpackage/simcontroller":{"id":"simpackage/simcontroller","title":"Router Handlers","description":"The Controller module defines routing logic for the simulator service. It connects API requests to appropriate handler functions that interact with a SimInterface strategy. Each route parses structured input using Pydantic models, delegates logic to the simulator backend, and returns standardized outputs such as simulation results, extracted data, and modified netlists.","sidebar":"connectorsSidebar"},"simpackage/siminterface":{"id":"simpackage/siminterface","title":"SimInterface","description":"The SimInterface class is an abstract base class that defines the interface contract for a simulator connector in the system. It extends ConnectorSpec and enforces implementation of core simulation capabilities such as netlist creation, parameter extraction, simulation execution, and component/model handling.","sidebar":"connectorsSidebar"},"simpackage/simulatordomain":{"id":"simpackage/simulatordomain","title":"Simulator","description":"The Simulator class is a domain-specific handler responsible for routing simulation requests, managing synchronization of required data, handling errors gracefully, and capturing performance metrics. It integrates with a WebSocket pool and thread pool to manage concurrent simulation sessions.","sidebar":"connectorsSidebar"},"simpackage/slim-models":{"id":"simpackage/slim-models","title":"Connector Models","description":"The Connector Models module defines Pydantic models used for managing connector-related functionality such as uploads, netlist modifications, dependency management, simulation setup, and data capture. These models enforce structure and validation for data exchanged between the frontend, backend, and simulation engine.","sidebar":"connectorsSidebar"},"simpackage/spice/netlist-reader":{"id":"simpackage/spice/netlist-reader","title":"SpiceNetlistProcessor","description":"Provides multiple helper functions to work with spice netlists.","sidebar":"connectorsSidebar"},"simpackage/spice/netlistscope":{"id":"simpackage/spice/netlistscope","title":"Netlist Scope","description":"Represents a netlist scope during parsing. Used to track hierarchy and definition context within a SPICE netlist.","sidebar":"connectorsSidebar"},"simpackage/spice/referrables":{"id":"simpackage/spice/referrables","title":"Referrables","description":"Holds reference information for parameters during parsing, allowing resolution of values across instance and definition scopes.","sidebar":"connectorsSidebar"},"simpackage/spice/spice_ast":{"id":"simpackage/spice/spice_ast","title":"Spice AST","description":"The spice_ast module defines the Abstract Syntax Tree (AST) structures for SPICE netlists. Each element of a SPICE circuit (components, sources, subcircuits, etc.) is represented as a class with relevant attributes.","sidebar":"connectorsSidebar"},"simpackage/spice/spiceparser":{"id":"simpackage/spice/spiceparser","title":"Spice Parser","description":"Parses SPICE netlists into structured AST representations.","sidebar":"connectorsSidebar"},"simpackage/spice/spicevariants":{"id":"simpackage/spice/spicevariants","title":"SPICEVariants","description":"An enumeration that defines the supported SPICE simulators. This enum provides a clean way to standardize and reference simulator backends within the system.","sidebar":"connectorsSidebar"}}}}')}}]);