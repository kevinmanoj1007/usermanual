"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[8719],{2677:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"API/Models/Optimization/optimization-spec","title":"OptimizationSpec","description":"Data class for defining the overall optimization process configuration and structure","source":"@site/adk/API/Models/Optimization/optimization-spec.md","sourceDirName":"API/Models/Optimization","slug":"/API/Models/Optimization/optimization-spec","permalink":"/adk/API/Models/Optimization/optimization-spec","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"OptimizationSpec","description":"Data class for defining the overall optimization process configuration and structure","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"OptimizationNodeSpec","permalink":"/adk/API/Models/Optimization/optimization-node"},"next":{"title":"TargetSpec","permalink":"/adk/API/Models/Optimization/targets"}}');var a=i(4848),s=i(8453);const r={title:"OptimizationSpec",description:"Data class for defining the overall optimization process configuration and structure",sidebar_position:3},o="OptimizationSpec",d={},c=[{value:"Definition",id:"definition",level:2},{value:"Members",id:"members",level:2},{value:"<code>inference: bool</code>",id:"inference-bool",level:3},{value:"<code>genie_model: str</code>",id:"genie_model-str",level:3},{value:"<code>optimization_nodes: dict[str, OptimizationNodeSpec]</code>",id:"optimization_nodes-dictstr-optimizationnodespec",level:3},{value:"<code>static_parameters: dict[str, DesignParamSpec]</code>",id:"static_parameters-dictstr-designparamspec",level:3},{value:"<code>optimized_parameters: dict[str, DesignParamSpec]</code>",id:"optimized_parameters-dictstr-designparamspec",level:3},{value:"<code>randomized_parameters: dict[str, DesignParamSpec]</code>",id:"randomized_parameters-dictstr-designparamspec",level:3},{value:"<code>targets: dict[str, TargetSpec]</code>",id:"targets-dictstr-targetspec",level:3},{value:"<code>step_system: BatchedStepWorldCB</code>",id:"step_system-batchedstepworldcb",level:3},{value:"Related Type Definitions",id:"related-type-definitions",level:2},{value:"<code>DesignParamValue = float | str</code>",id:"designparamvalue--float--str",level:3},{value:"<code>ObservationValue = float | list[float] | list[list[float]]</code>",id:"observationvalue--float--listfloat--listlistfloat",level:3},{value:"<code>StepWorldCB</code>",id:"stepworldcb",level:3},{value:"<code>BatchedStepWorldCB</code>",id:"batchedstepworldcb",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"optimizationspec",children:"OptimizationSpec"})}),"\n",(0,a.jsx)(t.p,{children:"A data class that defines the overall configuration and structure of an optimization process. It encapsulates all optimization nodes, parameters, targets, and the callable functions responsible for executing optimization steps."}),"\n",(0,a.jsx)(t.h2,{id:"definition",children:"Definition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class OptimizationSpec(BaseModel):\r\n    inference: bool\r\n    genie_model: str\r\n\r\n    optimization_nodes: dict[str, OptimizationNodeSpec]\r\n\r\n    static_parameters: dict[str, DesignParamSpec]\r\n    optimized_parameters: dict[str, DesignParamSpec]\r\n    randomized_parameters: dict[str, DesignParamSpec]\r\n\r\n    targets: dict[str, TargetSpec]\r\n\r\n    step_system: BatchedStepWorldCB\n"})}),"\n",(0,a.jsx)(t.h2,{id:"members",children:"Members"}),"\n",(0,a.jsx)(t.h3,{id:"inference-bool",children:(0,a.jsx)(t.code,{children:"inference: bool"})}),"\n",(0,a.jsxs)(t.p,{children:["Indicates whether the optimization process is running in inference mode. When ",(0,a.jsx)(t.code,{children:"True"}),", the system performs evaluation without learning or modifying parameters."]}),"\n",(0,a.jsx)(t.h3,{id:"genie_model-str",children:(0,a.jsx)(t.code,{children:"genie_model: str"})}),"\n",(0,a.jsx)(t.p,{children:"Identifier or name of the Genie model used in the optimization process. Defines the model architecture or behavior under optimization."}),"\n",(0,a.jsx)(t.h3,{id:"optimization_nodes-dictstr-optimizationnodespec",children:(0,a.jsx)(t.code,{children:"optimization_nodes: dict[str, OptimizationNodeSpec]"})}),"\n",(0,a.jsxs)(t.p,{children:["Dictionary containing the specification of all optimization nodes involved in the process. Each key is a node name, and each value is an ",(0,a.jsx)(t.code,{children:"OptimizationNodeSpec"})," describing that node's configuration, parameters, and targets."]}),"\n",(0,a.jsx)(t.h3,{id:"static_parameters-dictstr-designparamspec",children:(0,a.jsx)(t.code,{children:"static_parameters: dict[str, DesignParamSpec]"})}),"\n",(0,a.jsx)(t.p,{children:"Dictionary of parameters with fixed values that remain constant during optimization. Typically represent system constants or non-tunable configurations."}),"\n",(0,a.jsx)(t.h3,{id:"optimized_parameters-dictstr-designparamspec",children:(0,a.jsx)(t.code,{children:"optimized_parameters: dict[str, DesignParamSpec]"})}),"\n",(0,a.jsx)(t.p,{children:"Dictionary of parameters that are actively optimized by the system to achieve the defined objectives."}),"\n",(0,a.jsx)(t.h3,{id:"randomized_parameters-dictstr-designparamspec",children:(0,a.jsx)(t.code,{children:"randomized_parameters: dict[str, DesignParamSpec]"})}),"\n",(0,a.jsx)(t.p,{children:"Dictionary of parameters that are randomly varied to introduce diversity or stochastic behavior in the optimization process."}),"\n",(0,a.jsx)(t.h3,{id:"targets-dictstr-targetspec",children:(0,a.jsx)(t.code,{children:"targets: dict[str, TargetSpec]"})}),"\n",(0,a.jsxs)(t.p,{children:["Dictionary defining the optimization targets. Each entry specifies an objective or goal through a ",(0,a.jsx)(t.code,{children:"TargetSpec"})," that includes its function, type, and expected values."]}),"\n",(0,a.jsx)(t.h3,{id:"step_system-batchedstepworldcb",children:(0,a.jsx)(t.code,{children:"step_system: BatchedStepWorldCB"})}),"\n",(0,a.jsx)(t.p,{children:"A callable function that executes one batched optimization step in the system. It takes as input:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["A dictionary mapping node and parameter names to their respective values (",(0,a.jsx)(t.code,{children:"dict[str, dict[str, DesignParamValue]]"}),")."]}),"\n",(0,a.jsx)(t.li,{children:"Two boolean flags controlling step behavior (e.g., inference and reset conditions)."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"It returns a tuple containing:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"A dictionary of system observations."}),"\n",(0,a.jsx)(t.li,{children:"A dictionary of measured outcomes."}),"\n",(0,a.jsx)(t.li,{children:"A dictionary of additional metadata or runtime outputs."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"related-type-definitions",children:"Related Type Definitions"}),"\n",(0,a.jsx)(t.h3,{id:"designparamvalue--float--str",children:(0,a.jsx)(t.code,{children:"DesignParamValue = float | str"})}),"\n",(0,a.jsx)(t.p,{children:"Represents a single design parameter value, which can be either numeric or string-based."}),"\n",(0,a.jsx)(t.h3,{id:"observationvalue--float--listfloat--listlistfloat",children:(0,a.jsx)(t.code,{children:"ObservationValue = float | list[float] | list[list[float]]"})}),"\n",(0,a.jsx)(t.p,{children:"Represents the observed value from the system, supporting scalar, vector, and matrix-like data."}),"\n",(0,a.jsx)(t.h3,{id:"stepworldcb",children:(0,a.jsx)(t.code,{children:"StepWorldCB"})}),"\n",(0,a.jsx)(t.p,{children:"A callable for performing a single (non-batched) world step, handling one set of parameters at a time."}),"\n",(0,a.jsx)(t.h3,{id:"batchedstepworldcb",children:(0,a.jsx)(t.code,{children:"BatchedStepWorldCB"})}),"\n",(0,a.jsx)(t.p,{children:"A callable for performing a batched world step, processing multiple parameter sets or optimization nodes simultaneously. Returns structured observation, measurement, and metadata dictionaries."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(6540);const a={},s=n.createContext(a);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);