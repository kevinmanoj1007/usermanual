"use strict";(self.webpackChunkuser_manual=self.webpackChunkuser_manual||[]).push([[4714],{3728:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"cdk/cdksettings","title":"CDKSettings","description":"The CDKSettings class defines and loads configuration settings required to initialize and run a connector instance in the CDK (Connector Development Kit) environment. It provides both runtime environment selection (.env or .test.env) and a dynamic way to build the orchestrator\'s base URL.","source":"@site/connectors/cdk/cdksettings.md","sourceDirName":"cdk","slug":"/cdk/cdksettings","permalink":"/connectors/cdk/cdksettings","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"connectorsSidebar","previous":{"title":"BaseStartup","permalink":"/connectors/cdk/basestartup"},"next":{"title":"Registration","permalink":"/connectors/cdk/register"}}');var i=t(4848),r=t(8453);const c={},d="CDKSettings",l={},o=[{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Initializes",id:"initializes",level:3},{value:"Attributes",id:"attributes",level:2},{value:"Public Methods",id:"public-methods",level:2},{value:"Logic",id:"logic",level:4},{value:"Global Configuration",id:"global-configuration",level:2},{value:"cdk_settings",id:"cdk_settings",level:3},{value:"Initialization Logic",id:"initialization-logic",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Dependencies",id:"dependencies",level:2}];function a(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cdksettings",children:"CDKSettings"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"cdksettings",children:"CDKSettings"})," class defines and loads configuration settings required to initialize and run a connector instance in the CDK (Connector Development Kit) environment. It provides both runtime environment selection (.env or .test.env) and a dynamic way to build the orchestrator's base URL."]}),"\n",(0,i.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class CDKSettings(BaseSettings):\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inherits from:"})," BaseSettings",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Defined in:"})," core.config"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"cdksettings",children:"CDKSettings"})," class holds all essential configuration variables for a connector, such as orchestrator address, security credentials, heartbeat settings, and runtime flags."]}),"\n",(0,i.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(self, env_file: str):\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initializes the configuration from the specified environment file using the shared BaseSettings class."}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"env_file"})," (str): The name of the environment file (.env, .test.env, etc.)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"initializes",children:"Initializes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Configuration loading from specified environment file"}),"\n",(0,i.jsx)(n.li,{children:"Runtime environment selection and validation"}),"\n",(0,i.jsx)(n.li,{children:"Base settings inheritance and validation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"secret"})}),(0,i.jsx)(n.td,{children:"str"}),(0,i.jsx)(n.td,{children:'""'}),(0,i.jsx)(n.td,{children:"Authentication token or client key used by the connector"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:"str"}),(0,i.jsx)(n.td,{children:'""'}),(0,i.jsx)(n.td,{children:"Optional name for the connector instance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orc_host"})}),(0,i.jsx)(n.td,{children:"str"}),(0,i.jsx)(n.td,{children:'""'}),(0,i.jsx)(n.td,{children:"Hostname or IP address of the orchestrator"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orc_port"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"8080"}),(0,i.jsx)(n.td,{children:"Port used to connect to the orchestrator"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"heartbeat_timeout"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"20"}),(0,i.jsx)(n.td,{children:"Interval (in seconds) between heartbeat messages"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pool_size"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"30"}),(0,i.jsx)(n.td,{children:"Size of the WebSocket connection pool"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"data_dir"})}),(0,i.jsx)(n.td,{children:"str"}),(0,i.jsx)(n.td,{children:".connector_data"}),(0,i.jsx)(n.td,{children:"Directory used to store connector-specific data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ssl_enabled"})}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"Whether to use WSS (1) or WS (0) for communication"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"public-methods",children:"Public Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def base_url() -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the full base URL used to establish a WebSocket connection with the orchestrator."}),"\n",(0,i.jsx)(n.h4,{id:"logic",children:"Logic"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Uses ",(0,i.jsx)(n.code,{children:"wss://"})," if ",(0,i.jsx)(n.code,{children:"ssl_enabled"})," is truthy."]}),"\n",(0,i.jsx)(n.li,{children:"Constructs the URL as:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"<protocol>://<orc_host>:<orc_port>/orch\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," A string like ",(0,i.jsx)(n.code,{children:"wss://localhost:8080/orch"})," or ",(0,i.jsx)(n.code,{children:"ws://127.0.0.1:8080/orch"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"global-configuration",children:"Global Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"cdk_settings",children:"cdk_settings"}),"\n",(0,i.jsxs)(n.p,{children:["A singleton instance of ",(0,i.jsx)(n.a,{href:"cdksettings",children:"CDKSettings"}),", initialized automatically at import time."]}),"\n",(0,i.jsx)(n.h3,{id:"initialization-logic",children:"Initialization Logic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'if "TEST_ENV" in os.environ:\r\n    cdk_settings = CDKSettings(env_file=".test.env")\r\nelse:\r\n    cdk_settings = CDKSettings(env_file=".env")\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"TEST_ENV"})," is set in the environment, ",(0,i.jsx)(n.code,{children:".test.env"})," is used."]}),"\n",(0,i.jsxs)(n.li,{children:["Otherwise, the default ",(0,i.jsx)(n.code,{children:".env"})," file is loaded."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def update_settings(s: CDKSettings) -> None\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Updates the global ",(0,i.jsx)(n.code,{children:"cdk_settings"})," instance with a new configuration."]}),"\n",(0,i.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"s"})," (",(0,i.jsx)(n.a,{href:"cdksettings",children:"CDKSettings"}),"): An instance of ",(0,i.jsx)(n.a,{href:"cdksettings",children:"CDKSettings"})," that will replace the global one."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"os"}),": For environment variable detection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"logger"}),": Used to capture log messages during configuration loading"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BaseSettings"}),": Common configuration loader shared across the system (core.config.BaseSettings)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var s=t(6540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);